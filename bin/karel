#!/usr/bin/ruby
$: << File.expand_path(File.dirname(__FILE__) + '/../lib')
$: << File.expand_path(File.dirname(__FILE__) + '/../ext')
require 'rubygems'
require 'gli'
require 'karel'
require 'karel/syntax_checker'

include GLI

desc 'Executes a Karel program'
arg_name 'source_file'
command :run do |c|

  c.desc 'Run silently; do not show the world before or after'
  c.long_desc 'This will execute the karel source file, exiting with 0 if the program ran without incident.  An exit code of -1 means that Karel exploded, and -2 means that a potential infinite loop was encountered'
  c.switch :s

  c.desc 'Number of "ticks" to allow before assuming we are in an infinite loop'
  c.long_desc 'To keep this implementation simple, we will count the number of times we execute a Karel command.  If this number exceeds the number here, we will assume a non-terminating program and exit'
  c.default_value '1000'
  c.flag [:x]

  c.desc 'Show the world after each command is executed'
  c.switch [:g,:debug]

  c.action do |global_options,options,args|
    raise "You must provide a karel source file" if args.empty?
    include Karel
    code = File.open(args[0]).readlines.join("")
    checker = Karel::SyntaxChecker.new
    unless checker.valid?(code)
      checker.errors.keys.sort.each do |line_number|
        $stderr.puts "#{line_number}: #{checker.errors[line_number]}"
      end
      raise "There were syntax errors"
    end
    DEBUG() if options[:g]
    SILENT() if options[:s]
    eval(code)
    unless options[:s]
      puts "Final State"
      puts THE_WORLD.to_s
    end
  end
end

desc 'Performs a basic syntax check'
arg_name 'source_file'
command :check do |c|
  c.action do |global_options,options,args|
    raise "You must provide a karel source file" if args.empty?
    checker = Karel::SyntaxChecker.new
    code = File.open(args[0]).readlines.join("")
    unless checker.valid?(code)
      checker.errors.keys.sort.each do |line_number|
        $stderr.puts "#{line_number}: #{checker.errors[line_number]}"
      end
    end
  end
end

desc 'Creates a new example Karel program'
arg_name 'source_file'
command :init do |c|
  c.desc 'Overwite files'
  c.switch [:f,:force]

  c.action do |global_options,options,args|
    raise "You must provide a karel source file" if args.empty?
    not_overwritten = []
    args.each do |filename|
      if File.exists?(filename) && !options[:f]
        not_overwritten << filename 
      else
        File.open(filename,'w') do |file|
          file.puts <<EOF
# A 10x10 world
WORLD <<END
B   WW  WB
    W
    W
    W
    WB
  WWWW
        WW
         W
 B
K
END

# Create a subroutine
DEFINE('MOVE_TWICE') {
  MOVE()
  MOVE()
}

MOVE()
TURNLEFT()
TURNLEFT()
TURNLEFT()
MOVE()
PICKBEEPER()
MOVE_TWICE()
PUTBEEPER()
WHILE(front_clear) {
  MOVE()
}
EOF
        end
      end
    end
    not_overwritten.each do |filename|
      puts "Not overwriting #{filename}; file exists"
    end
  end
end

pre do |global,command,options,args|
  true
end

post do |global,command,options,args|
end

on_error do |exception|
  case exception
    when Karel::Explosion 
      $stderr.puts "Karel Exploded"
      $stderr.puts THE_WORLD.to_s
      false
    else
#      puts exception.backtrace
      true
  end
end

GLI.run(ARGV)
